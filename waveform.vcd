$version Generated by VerilatedVcd $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 f clk $end
  $scope module main $end
   $var wire 32 % DCFlushAddr_EXFlushAddr [31:0] $end
   $var wire  1 $ DCFlush_EXFlush $end
   $var wire 32 - DCPCOut_EXPC [31:0] $end
   $var wire  1 # DCStall_EXStall $end
   $var wire  3 * DCfunc3Out_EXfunc3 [2:0] $end
   $var wire  7 + DCfunc7Out_EXfunc7 [6:0] $end
   $var wire 32 , DCimmediateOut_EXimmediate [31:0] $end
   $var wire  7 ( DCopcodeOut_EXopcode [6:0] $end
   $var wire  5 ) DCrdOut_EXrd [4:0] $end
   $var wire  5 8 DCrs1Out_HDUEXrs1 [4:0] $end
   $var wire  5 8 DCrs1Out_RFrs1 [4:0] $end
   $var wire  5 9 DCrs2Out_HDUEXrs2 [4:0] $end
   $var wire  5 9 DCrs2Out_RFrs2 [4:0] $end
   $var wire  1 # EXStall $end
   $var wire  3 2 EXaddressModeOut_MMaddressMode [2:0] $end
   $var wire 32 1 EXaddressOut_MMaddress [31:0] $end
   $var wire  1 4 EXnoMEMOut_MMnoMEM $end
   $var wire  5 3 EXrdOut_HDUMMrd [4:0] $end
   $var wire  5 3 EXrdOut_MMrd [4:0] $end
   $var wire  1 . EXreadOut_MMread $end
   $var wire 32 0 EXvalueOut_MMdata [31:0] $end
   $var wire  1 / EXwriteOut_MMwrite $end
   $var wire 32 % IFFlushAddr_DCFlushAddr [31:0] $end
   $var wire  1 $ IFFlush_DCFlush $end
   $var wire 32 & IFInstruction_DCInstruction [31:0] $end
   $var wire 32 ' IFPC_DCPC [31:0] $end
   $var wire  1 # IFStall_DCStall $end
   $var wire  1 k MMStall $end
   $var wire  1 7 MMWEOut_RFWE $end
   $var wire 32 6 MMdataOut_RFdataIn [31:0] $end
   $var wire  5 5 MMrdOut_HDUWBrd [4:0] $end
   $var wire  5 5 MMrdOut_RFrd [4:0] $end
   $var wire  1 k MMstallOut_EXstall $end
   $var wire 32 : RFr1Out_EXreg1Value [31:0] $end
   $var wire 32 ; RFr2Out_EXreg2Value [31:0] $end
   $var wire 32 j adrWidth [31:0] $end
   $var wire  1 f clk $end
   $var wire 32 i opcodeWidth [31:0] $end
   $var wire 32 h rsWidth [31:0] $end
   $var wire 32 g width [31:0] $end
   $scope module DC_Stage_instance $end
    $var wire 32 ' PC [31:0] $end
    $var wire 32 - PCOut [31:0] $end
    $var wire  1 f clk $end
    $var wire  1 $ flush $end
    $var wire 32 % flushAddr [31:0] $end
    $var wire 32 % flushAddrOut [31:0] $end
    $var wire  1 $ flushOut $end
    $var wire  3 * func3Out [2:0] $end
    $var wire  7 + func7Out [6:0] $end
    $var wire 32 , immediateOut [31:0] $end
    $var wire 32 & instruction [31:0] $end
    $var wire  7 ( opcodeOut [6:0] $end
    $var wire 32 i opcodeWidth [31:0] $end
    $var wire  5 ) rdOut [4:0] $end
    $var wire  5 8 rs1Out [4:0] $end
    $var wire  5 9 rs2Out [4:0] $end
    $var wire 32 h rsWidth [31:0] $end
    $var wire  1 # stall $end
    $var wire  1 # stallOut $end
    $var wire 32 g width [31:0] $end
   $upscope $end
   $scope module EX_Stage_instance $end
    $var wire 32 @ ALUOut [31:0] $end
    $var wire 32 = ALUinput1 [31:0] $end
    $var wire 32 > ALUinput2 [31:0] $end
    $var wire  2 ? ALUoperation [1:0] $end
    $var wire 32 - PC [31:0] $end
    $var wire  3 2 addressModeOut [2:0] $end
    $var wire 32 1 addressOut [31:0] $end
    $var wire  1 f clk $end
    $var wire 32 % flushAddrOut [31:0] $end
    $var wire  1 $ flushOut $end
    $var wire  3 * func3 [2:0] $end
    $var wire  7 + func7 [6:0] $end
    $var wire 32 , immediate [31:0] $end
    $var wire  1 4 noMEMOut $end
    $var wire  7 ( opcode [6:0] $end
    $var wire 32 i opcodeWidth [31:0] $end
    $var wire  5 ) rd [4:0] $end
    $var wire  5 3 rdOut [4:0] $end
    $var wire  1 . readOut $end
    $var wire 32 : reg1Value [31:0] $end
    $var wire 32 ; reg2Value [31:0] $end
    $var wire 32 h rsWidth [31:0] $end
    $var wire  1 k stall $end
    $var wire  1 # stallOut $end
    $var wire  1 # stallStart $end
    $var wire 32 0 valueOut [31:0] $end
    $var wire 32 < valueOutWire [31:0] $end
    $var wire 32 g width [31:0] $end
    $var wire  1 / writeOut $end
    $scope module ALU_instance $end
     $var wire  3 * func3 [2:0] $end
     $var wire  7 + func7 [6:0] $end
     $var wire 32 = input1 [31:0] $end
     $var wire 32 > input2 [31:0] $end
     $var wire  2 ? operation [1:0] $end
     $var wire 32 @ output1 [31:0] $end
     $var wire 32 g width [31:0] $end
    $upscope $end
   $upscope $end
   $scope module HDU_instance $end
    $var wire  1 # EXStall $end
    $var wire  5 8 EXrs1 [4:0] $end
    $var wire  5 9 EXrs2 [4:0] $end
    $var wire  1 k MMStall $end
    $var wire  5 3 MMrd [4:0] $end
    $var wire  5 5 WBrd [4:0] $end
   $upscope $end
   $scope module IF_Stage_instance $end
    $var wire 32 A PC [31:0] $end
    $var wire 32 ' PCOut [31:0] $end
    $var wire  1 f clk $end
    $var wire  1 $ flush $end
    $var wire 32 % flushAddr [31:0] $end
    $var wire 32 & instructionOut [31:0] $end
    $var wire 32 B rom_IR [31:0] $end
    $var wire  1 # stall $end
    $var wire 32 g width [31:0] $end
    $scope module rom $end
     $var wire 24 C address [23:0] $end
     $var wire 32 j addressWidth [31:0] $end
     $var wire 32 B instruction [31:0] $end
     $var wire 32 g width [31:0] $end
    $upscope $end
   $upscope $end
   $scope module MM_Stage_instance $end
    $var wire  1 7 WEOut $end
    $var wire 32 1 address [31:0] $end
    $var wire  3 2 addressMode [2:0] $end
    $var wire 32 j adrWidth [31:0] $end
    $var wire  1 f clk $end
    $var wire 32 0 data [31:0] $end
    $var wire 32 6 dataOut [31:0] $end
    $var wire 32 D dataOutWire [31:0] $end
    $var wire  1 4 noMEM $end
    $var wire  5 3 rd [4:0] $end
    $var wire  5 5 rdOut [4:0] $end
    $var wire  1 . read $end
    $var wire 32 h rsWidth [31:0] $end
    $var wire  1 k stallOut $end
    $var wire  1 k stallStart $end
    $var wire 32 g width [31:0] $end
    $var wire  1 / write $end
    $scope module LSU_instance $end
     $var wire  1 / WE $end
     $var wire 24 E address [23:0] $end
     $var wire  3 2 addressMode [2:0] $end
     $var wire 32 j adrWidth [31:0] $end
     $var wire  1 f clk $end
     $var wire 32 0 data [31:0] $end
     $var wire 32 D dataOut [31:0] $end
     $var wire 32 g width [31:0] $end
    $upscope $end
   $upscope $end
   $scope module regFile_instance $end
    $var wire  1 7 WE $end
    $var wire  1 f clk $end
    $var wire 32 6 dataIn [31:0] $end
    $var wire 32 F file[0] [31:0] $end
    $var wire 32 P file[10] [31:0] $end
    $var wire 32 Q file[11] [31:0] $end
    $var wire 32 R file[12] [31:0] $end
    $var wire 32 S file[13] [31:0] $end
    $var wire 32 T file[14] [31:0] $end
    $var wire 32 U file[15] [31:0] $end
    $var wire 32 V file[16] [31:0] $end
    $var wire 32 W file[17] [31:0] $end
    $var wire 32 X file[18] [31:0] $end
    $var wire 32 Y file[19] [31:0] $end
    $var wire 32 G file[1] [31:0] $end
    $var wire 32 Z file[20] [31:0] $end
    $var wire 32 [ file[21] [31:0] $end
    $var wire 32 \ file[22] [31:0] $end
    $var wire 32 ] file[23] [31:0] $end
    $var wire 32 ^ file[24] [31:0] $end
    $var wire 32 _ file[25] [31:0] $end
    $var wire 32 ` file[26] [31:0] $end
    $var wire 32 a file[27] [31:0] $end
    $var wire 32 b file[28] [31:0] $end
    $var wire 32 c file[29] [31:0] $end
    $var wire 32 H file[2] [31:0] $end
    $var wire 32 d file[30] [31:0] $end
    $var wire 32 e file[31] [31:0] $end
    $var wire 32 I file[3] [31:0] $end
    $var wire 32 J file[4] [31:0] $end
    $var wire 32 K file[5] [31:0] $end
    $var wire 32 L file[6] [31:0] $end
    $var wire 32 M file[7] [31:0] $end
    $var wire 32 N file[8] [31:0] $end
    $var wire 32 O file[9] [31:0] $end
    $var wire 32 : r1Out [31:0] $end
    $var wire 32 ; r2Out [31:0] $end
    $var wire  5 5 rd [4:0] $end
    $var wire  5 8 rs1 [4:0] $end
    $var wire  5 9 rs2 [4:0] $end
    $var wire 32 g width [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
0$
b00000000000000000000000000000000 %
b00000000000000000000000000010011 &
b00000000000000000000000000000000 '
b0000000 (
b00000 )
b000 *
b0000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
0.
0/
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b000 2
b00000 3
04
b00000 5
b00000000000000000000000000000000 6
07
b00000 8
b00000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000111100000000000010010011 B
b000000000000000000000000 C
b00000000000000000000000000000000 D
b000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000000 _
b00000000000000000000000000000000 `
b00000000000000000000000000000000 a
b00000000000000000000000000000000 b
b00000000000000000000000000000000 c
b00000000000000000000000000000000 d
b00000000000000000000000000000000 e
1f
b00000000000000000000000000100000 g
b00000000000000000000000000000101 h
b00000000000000000000000000000111 i
b00000000000000000000000000011000 j
0k
#1
0f
#2
b00000000111100000000000010010011 &
b0010011 (
14
b00000000000000000000000000000100 A
b11111111111100001000000010010011 B
b000000000000000000000100 C
1f
#3
0f
#4
b11111111111100001000000010010011 &
b00000000000000000000000000000100 '
b00001 )
b00000000000000000000000000001111 ,
17
b00000000000000000000000000001111 >
b00000000000000000000000000001111 @
b00000000000000000000000000001000 A
b11111110000000001001111011100011 B
b000000000000000000001000 C
1f
#5
0f
#6
b00000000000000000000000000000100 %
b11111110000000001001111011100011 &
b00000000000000000000000000001000 '
b00000000000000000000111111111111 ,
b00000000000000000000000000000100 -
b00000000000000000000000000001111 0
b00000000000000000000000000001111 1
b00001 3
b00001 8
b00000000000000000000111111111111 >
b00000000000000000000111111111111 @
b00000000000000000000000000001100 A
b00000000111100000000000100010011 B
b000000000000000000001100 C
b000000000000000000001111 E
1f
#7
0f
#8
1#
b00000000000000000000000000001000 %
b00000000111100000000000100010011 &
b00000000000000000000000000001100 '
b1100011 (
b00000 )
b001 *
b00000000000000000001111111111100 ,
b00000000000000000000000000001000 -
b00000000000000000000111111111111 0
b00000000000000000000111111111111 1
b00001 5
b00000000000000000000000000001111 6
b00000000000000000000000000000000 @
b00000000000000000000000000010000 A
b00000000000000000000000000000000 B
b000000000000000000010000 C
b000000000000111111111111 E
1f
#9
0f
#10
0#
1$
b00000000000000000010000000001000 %
b00000000000000000000000000001100 -
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000 3
b00000000000000000000111111111111 6
b00000000000000000000000000001111 :
b000000000000000000000000 E
b00000000000000000000000000001111 G
1f
#11
0f
#12
0$
b00000000000000000000000000001100 %
b00000000000000000000000000010011 &
b00000000000000000010000000001000 '
b0110011 (
b000 *
b00000000000000000000000000000000 ,
b001 2
b00000 5
b00000000000000000000000000000000 6
b00000 8
b00000000000000000000000000000000 :
b00000000000000000000000000000000 >
b00000000000000000010000000001000 A
b000000000010000000001000 C
b00000000000000000000111111111111 G
1f
#13
0f
#14
b00000000000000000010000000001000 %
b00000000000000000000000000000000 &
b0010011 (
b00000000000000000010000000001000 -
b000 2
b00000000000000000010000000001100 A
b000000000010000000001100 C
1f
#15
0f
#16
b00000000000000000010000000001100 '
b0000000 (
b00000000000000000010000000010000 A
b000000000010000000010000 C
1f
#17
0f
#18
b00000000000000000010000000001100 %
b00000000000000000010000000010000 '
b00000000000000000010000000001100 -
b00000000000000000010000000010100 A
b000000000010000000010100 C
1f
#19
0f
#20
b00000000000000000010000000010000 %
b00000000000000000010000000010100 '
b00000000000000000010000000010000 -
b00000000000000000010000000011000 A
b000000000010000000011000 C
1f
#21
0f
#22
b00000000000000000010000000010100 %
b00000000000000000010000000011000 '
b00000000000000000010000000010100 -
b00000000000000000010000000011100 A
b000000000010000000011100 C
1f
#23
0f
#24
b00000000000000000010000000011000 %
b00000000000000000010000000011100 '
b00000000000000000010000000011000 -
b00000000000000000010000000100000 A
b000000000010000000100000 C
1f
#25
0f
#26
b00000000000000000010000000011100 %
b00000000000000000010000000100000 '
b00000000000000000010000000011100 -
b00000000000000000010000000100100 A
b000000000010000000100100 C
1f
#27
0f
#28
b00000000000000000010000000100000 %
b00000000000000000010000000100100 '
b00000000000000000010000000100000 -
b00000000000000000010000000101000 A
b000000000010000000101000 C
1f
#29
0f
#30
b00000000000000000010000000100100 %
b00000000000000000010000000101000 '
b00000000000000000010000000100100 -
b00000000000000000010000000101100 A
b000000000010000000101100 C
1f
#31
0f
#32
b00000000000000000010000000101000 %
b00000000000000000010000000101100 '
b00000000000000000010000000101000 -
b00000000000000000010000000110000 A
b000000000010000000110000 C
1f
#33
0f
#34
b00000000000000000010000000101100 %
b00000000000000000010000000110000 '
b00000000000000000010000000101100 -
b00000000000000000010000000110100 A
b000000000010000000110100 C
1f
#35
0f
#36
b00000000000000000010000000110000 %
b00000000000000000010000000110100 '
b00000000000000000010000000110000 -
b00000000000000000010000000111000 A
b000000000010000000111000 C
1f
#37
0f
#38
b00000000000000000010000000110100 %
b00000000000000000010000000111000 '
b00000000000000000010000000110100 -
b00000000000000000010000000111100 A
b000000000010000000111100 C
1f
#39
0f
#40
b00000000000000000010000000111000 %
b00000000000000000010000000111100 '
b00000000000000000010000000111000 -
b00000000000000000010000001000000 A
b000000000010000001000000 C
1f
#41
0f
#42
b00000000000000000010000000111100 %
b00000000000000000010000001000000 '
b00000000000000000010000000111100 -
b00000000000000000010000001000100 A
b000000000010000001000100 C
1f
#43
0f
#44
b00000000000000000010000001000000 %
b00000000000000000010000001000100 '
b00000000000000000010000001000000 -
b00000000000000000010000001001000 A
b000000000010000001001000 C
1f
#45
0f
#46
b00000000000000000010000001000100 %
b00000000000000000010000001001000 '
b00000000000000000010000001000100 -
b00000000000000000010000001001100 A
b000000000010000001001100 C
1f
#47
0f
#48
b00000000000000000010000001001000 %
b00000000000000000010000001001100 '
b00000000000000000010000001001000 -
b00000000000000000010000001010000 A
b000000000010000001010000 C
1f
#49
0f
